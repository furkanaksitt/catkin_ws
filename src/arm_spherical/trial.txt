import rospy
from sensor_msgs.msg import JointState
import math
import numpy as np

def smooth_direction_change(current_dir, target_dir, smoothing_factor=0.1):
    """Kademeli yön değişimi sağlar"""
    return current_dir + smoothing_factor * (target_dir - current_dir)

def limit_velocity(current_pos, target_pos, max_vel, dt):
    """Hızı sınırlayarak hedef pozisyona doğru hareket eder"""
    diff = target_pos - current_pos
    vel = diff / dt
    if abs(vel) > max_vel:
        vel = max_vel * (1 if vel > 0 else -1)
    return current_pos + vel * dt

def rotate_joints():
    rospy.init_node('urdf_model_rotator', anonymous=True)

    # Publisher for joint states
    joint_pub = rospy.Publisher('/joint_states', JointState, queue_size=10, latch=True)

    # Tutarlı bir hız seçin
    rate = rospy.Rate(30)  # 30 Hz

    # Initialize joint positions and directions
    joint_positions = [0.0, 0.0, 0.0]
    joint_directions = [1, 1, 1]  # 1 for increasing, -1 for decreasing
    joint_limits = [1.57, 1.57, 2.35]  # Max limits for each joint

    t = 0.0  # Time variable for sinusoidal motion
    active_joint = 0  # Start with the first joint
    pause_counter = 0  # Counter for pausing at the center
    epsilon = 0.01  # Tolerance for checking if joint is at center

    rospy.set_param('/motion_mode', 'sequential')  # Default motion mode

    # Log only when positions change significantly
    last_logged_positions = [0, 0, 0]
    
    max_velocity = 0.05  # birim/saniye
    dt = 0.033  # 30Hz için zaman adımı

    while not rospy.is_shutdown():
        # Get the current motion mode
        motion_mode = rospy.get_param('/motion_mode', 'linear')

        if motion_mode == 'linear':
            # Linear motion
            for i in range(3):
                target_position = joint_positions[i] + joint_directions[i] * 0.01
                joint_positions[i] = limit_velocity(
                    joint_positions[i], 
                    target_position, 
                    max_velocity, 
                    dt
                )
                if joint_positions[i] >= joint_limits[i] or joint_positions[i] <= -joint_limits[i]:
                    # Kademeli yön değişimi
                    target_dir = -joint_directions[i]
                    joint_directions[i] = smooth_direction_change(joint_directions[i], target_dir)

        elif motion_mode == 'sinusoidal':
            # Sinusoidal motion - Daha yavaş sinüs hareketi için katsayıyı azaltalım
            joint_positions = [
                math.sin(t * 0.5) * 1.57,  # Base_Revolute - daha yavaş
                math.sin(t * 0.5 + math.pi / 2) * 1.57,  # Revolute_2 - daha yavaş
                math.sin(t * 0.5 + math.pi) * 2.35  # Revolute3 - daha yavaş
            ]

        elif motion_mode == 'sequential':
            # Sequential motion: Move one joint at a time
            if pause_counter > 0:
                pause_counter -= 1  # Pause at the center
            else:
                # Daha küçük adım büyüklüğü
                joint_positions[active_joint] += joint_directions[active_joint] * 0.02
                if joint_positions[active_joint] >= joint_limits[active_joint] or joint_positions[active_joint] <= -joint_limits[active_joint]:
                    # Kademeli yön değişimi
                    target_dir = -joint_directions[active_joint]
                    joint_directions[active_joint] = smooth_direction_change(joint_directions[active_joint], target_dir)
                # Check if the joint is back at center (with tolerance)
                if abs(joint_positions[active_joint]) < epsilon:
                    active_joint = (active_joint + 1) % 3  # Move to the next joint
                    pause_counter = 30  # Pause for 1 second (30 cycles at 30 Hz)

        # Create a JointState message
        joint_state = JointState()
        joint_state.header.stamp = rospy.Time.now()
        joint_state.name = ['Base_Revolute', 'Revolute_2', 'Revolute3']
        joint_state.position = joint_positions

        # Publish the joint states
        joint_pub.publish(joint_state)

        # Only log when positions change by more than a threshold
        should_log = False
        for i in range(3):
            if abs(joint_positions[i] - last_logged_positions[i]) > 0.1:
                should_log = True
                last_logged_positions = joint_positions.copy()
                break

        if should_log:
            # Log the published values
            rospy.loginfo(f"Motion Mode: {motion_mode}, Positions: {joint_positions}")

        # Increment time for motion profiles
        t += 0.033  # ~30Hz (1/30 = 0.033)
        rate.sleep()

if __name__ == '__main__':
    try:
        rotate_joints()
    except rospy.ROSInterruptException:
        pass
